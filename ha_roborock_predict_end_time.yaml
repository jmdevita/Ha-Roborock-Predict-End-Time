blueprint:
  name: Roborock Cleaning Prediction End Time
  description: Predicts when the Roborock vacuum will finish cleaning based on past state transitions.
  domain: template
  input:
    sensor_entity:
      type: entity
      name: Roborock Sensor Entity ID
      description: The entity ID of the Roborock cleaning progress sensor.
      default: sensor.roborock_qrevo_edge_cleaning_progress

sensor:
  - platform: template
    sensors:
      roborock_prediction_end_time:
        value_template: |
          {% set states_sensor = expand(inputs.sensor_entity) | map(attribute='state') | list %}
          {% set last_changed_times = state_attr(inputs.sensor_entity, 'all') | map(attribute='last_changed') | list %}
          {% set current_state = states(inputs.sensor_entity) %}

          {# Handle alternating states between 0 and unavailable #}
          {% if states_sensor[-2:] == ['0', 'unavailable'] or states_sensor[-2:] == ['unavailable', '0'] %}
            'unavailable'
          {% else %}
              {# Calculate the time intervals between each state transition where both states are non-zero integers #}
              {% set time_diffs_sec_list = [] %}
              {% set last_changed_times_filtered = [] %}
              {% for i in range(1, last_changed_times | length) if is_number(states_sensor[i]) and is_number(states_sensor[i-1]) and states_sensor[i] > 0 and states_sensor[i-1] > 0 %}
                 {% set diff_sec = (last_changed_times[i] - last_changed_times[i-1]).total_seconds() %}
                 {% set time_diffs_sec_list = time_diffs_sec_list + [diff_sec] %}
              {% endfor %}

              {# If there are no transitions yet, wait for more data before starting prediction #}
              {% if time_diffs_sec_list | length == 0 %}
                'unknown'
              {% else %}
                {% set average_time_per_state = (time_diffs_sec_list | sum) / (time_diffs_sec_list | length) %}
                
                {# Predict the end time when state reaches 100 #}
                {% set max_state = 100 %}
                {% set states_to_end = max_state - current_state|int %}
                {% if states_to_end > 0 %}
                  {% set predicted_end_time = now() + timedelta(seconds=states_to_end * average_time_per_state) %}
                  {{ predicted_end_time.isoformat() }}
                {% else %}
                  'unknown' {# If the state is already at or beyond max_state #}
                {% endif %}
              {% endif %}
          {% endif %}

        friendly_name: Roborock Cleaning Prediction End Time
